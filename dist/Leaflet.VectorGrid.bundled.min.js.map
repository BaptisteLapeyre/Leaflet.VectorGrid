{"version":3,"file":"Leaflet.VectorGrid.bundled.min.js","sources":["../.gobble-build/03-concat/1/node_modules/point-geometry/index.js","../src/Leaflet.Renderer.SVG.Tile.js","../src/Leaflet.Renderer.Canvas.Tile.js","../src/Leaflet.VectorGrid.js","../src/Leaflet.VectorGrid.Slicer.js","../src/Leaflet.VectorGrid.Protobuf.js","../.gobble-build/03-concat/1/node_modules/browserify/node_modules/browser-pack/_prelude.js","../.gobble-build/03-concat/1/src/clip.js","../.gobble-build/03-concat/1/src/convert.js","../.gobble-build/03-concat/1/src/index.js","../.gobble-build/03-concat/1/src/simplify.js","../.gobble-build/03-concat/1/src/tile.js","../.gobble-build/03-concat/1/src/transform.js","../.gobble-build/03-concat/1/src/wrap.js","../.gobble-build/03-concat/1/buffer.js","../.gobble-build/03-concat/1/index.js","../.gobble-build/03-concat/1/node_modules/ieee754/index.js","../vendor/topojson.js","../.gobble-build/03-concat/pbf/node_modules/browserify/node_modules/browser-pack/_prelude.js","../.gobble-build/03-concat/1/lib/vectortile.js","../.gobble-build/03-concat/1/lib/vectortilefeature.js","../.gobble-build/03-concat/1/lib/vectortilelayer.js"],"sourcesContent":["'use strict';\n\nmodule.exports = Point;\n\nfunction Point(x, y) {\n    this.x = x;\n    this.y = y;\n}\n\nPoint.prototype = {\n    clone: function() { return new Point(this.x, this.y); },\n\n    add:     function(p) { return this.clone()._add(p);     },\n    sub:     function(p) { return this.clone()._sub(p);     },\n    mult:    function(k) { return this.clone()._mult(k);    },\n    div:     function(k) { return this.clone()._div(k);     },\n    rotate:  function(a) { return this.clone()._rotate(a);  },\n    matMult: function(m) { return this.clone()._matMult(m); },\n    unit:    function() { return this.clone()._unit(); },\n    perp:    function() { return this.clone()._perp(); },\n    round:   function() { return this.clone()._round(); },\n\n    mag: function() {\n        return Math.sqrt(this.x * this.x + this.y * this.y);\n    },\n\n    equals: function(p) {\n        return this.x === p.x &&\n               this.y === p.y;\n    },\n\n    dist: function(p) {\n        return Math.sqrt(this.distSqr(p));\n    },\n\n    distSqr: function(p) {\n        var dx = p.x - this.x,\n            dy = p.y - this.y;\n        return dx * dx + dy * dy;\n    },\n\n    angle: function() {\n        return Math.atan2(this.y, this.x);\n    },\n\n    angleTo: function(b) {\n        return Math.atan2(this.y - b.y, this.x - b.x);\n    },\n\n    angleWith: function(b) {\n        return this.angleWithSep(b.x, b.y);\n    },\n\n    // Find the angle of the two vectors, solving the formula for the cross product a x b = |a||b|sin(θ) for θ.\n    angleWithSep: function(x, y) {\n        return Math.atan2(\n            this.x * y - this.y * x,\n            this.x * x + this.y * y);\n    },\n\n    _matMult: function(m) {\n        var x = m[0] * this.x + m[1] * this.y,\n            y = m[2] * this.x + m[3] * this.y;\n        this.x = x;\n        this.y = y;\n        return this;\n    },\n\n    _add: function(p) {\n        this.x += p.x;\n        this.y += p.y;\n        return this;\n    },\n\n    _sub: function(p) {\n        this.x -= p.x;\n        this.y -= p.y;\n        return this;\n    },\n\n    _mult: function(k) {\n        this.x *= k;\n        this.y *= k;\n        return this;\n    },\n\n    _div: function(k) {\n        this.x /= k;\n        this.y /= k;\n        return this;\n    },\n\n    _unit: function() {\n        this._div(this.mag());\n        return this;\n    },\n\n    _perp: function() {\n        var y = this.y;\n        this.y = this.x;\n        this.x = -y;\n        return this;\n    },\n\n    _rotate: function(angle) {\n        var cos = Math.cos(angle),\n            sin = Math.sin(angle),\n            x = cos * this.x - sin * this.y,\n            y = sin * this.x + cos * this.y;\n        this.x = x;\n        this.y = y;\n        return this;\n    },\n\n    _round: function() {\n        this.x = Math.round(this.x);\n        this.y = Math.round(this.y);\n        return this;\n    }\n};\n\n// constructs Point from an array if necessary\nPoint.convert = function (a) {\n    if (a instanceof Point) {\n        return a;\n    }\n    if (Array.isArray(a)) {\n        return new Point(a[0], a[1]);\n    }\n    return a;\n};\n","\n\nL.SVG.Tile = L.SVG.extend({\n\n\tinitialize: function (tileSize, options) {\n\t\tL.SVG.prototype.initialize.call(this, options);\n\t\tthis._size = tileSize;\n\n\t\tthis._initContainer();\n\t\tthis._container.setAttribute('width', this._size.x);\n\t\tthis._container.setAttribute('height', this._size.y);\n\t\tthis._container.setAttribute('viewBox', [0, 0, this._size.x, this._size.y].join(' '));\n\t},\n\n\tgetContainer: function() {\n\t\treturn this._container;\n\t},\n\n// \tonAdd: function() {},\n\tonAdd: L.Util.FalseFn,\n\n\t_initContainer: function() {\n\t\tL.SVG.prototype._initContainer.call(this);\n\t\tvar rect =  L.SVG.create('rect');\n\n// \t\trect.setAttribute('x', 0);\n// \t\trect.setAttribute('y', 0);\n// \t\trect.setAttribute('width', this._size.x);\n// \t\trect.setAttribute('height', this._size.y);\n// \t\trect.setAttribute('fill', 'transparent');\n// \t\trect.setAttribute('stroke', 'black');\n// \t\trect.setAttribute('stroke-width', 2);\n// \t\tthis._rootGroup.appendChild(rect);\n\t},\n\n\t/// TODO: Modify _initPath to include an extra parameter, a group name\n\t/// to order symbolizers by z-index\n\n\t_addPath: function (layer) {\n\t\tthis._rootGroup.appendChild(layer._path);\n\t},\n\n});\n\n\nL.svg.tile = function(tileSize, opts){\n\treturn new L.SVG.Tile(tileSize, opts);\n}\n\n","\n\nL.Canvas.Tile = L.Canvas.extend({\n\n\tinitialize: function (tileSize, options) {\n\t\tL.Canvas.prototype.initialize.call(this, options);\n\t\tthis._size = tileSize;\n\n\t\tthis._initContainer();\n\t\tthis._container.setAttribute('width', this._size.x);\n\t\tthis._container.setAttribute('height', this._size.y);\n\t\tthis._layers = {};\n\t\tthis._drawnLayers = {};\n\t},\n\n\tgetContainer: function() {\n\t\treturn this._container;\n\t},\n\n\tonAdd: L.Util.FalseFn,\n\n\t_initContainer: function () {\n\t\tvar container = this._container = document.createElement('canvas');\n\n// \t\tL.DomEvent\n// \t\t\t.on(container, 'mousemove', L.Util.throttle(this._onMouseMove, 32, this), this)\n// \t\t\t.on(container, 'click dblclick mousedown mouseup contextmenu', this._onClick, this)\n// \t\t\t.on(container, 'mouseout', this._handleMouseOut, this);\n\n\t\tthis._ctx = container.getContext('2d');\n\t},\n\n\n\t/// TODO: Modify _initPath to include an extra parameter, a group name\n\t/// to order symbolizers by z-index\n\n});\n\n\nL.canvas.tile = function(tileSize, opts){\n\treturn new L.Canvas.Tile(tileSize, opts);\n}\n\n","\n\nL.VectorGrid = L.GridLayer.extend({\n\n\toptions: {\n\t\trendererFactory: L.svg.tile,\n\t\tvectorTileLayerStyles: {}\n\t},\n\n\tcreateTile: function(coords, done) {\n\t\tvar renderer = this.options.rendererFactory(this.getTileSize(), this.options);\n\n\t\tvar vectorTilePromise = this._getVectorTilePromise(coords);\n\n\n\t\tvectorTilePromise.then( function(vectorTile) {\n\n\t\t\tfor (var layerName in vectorTile.layers) {\n\t\t\t\tvar layer = vectorTile.layers[layerName];\n\n\t\t\t\t/// NOTE: THIS ASSUMES SQUARE TILES!!!!!1!\n\t\t\t\tvar pxPerExtent = this.getTileSize().x / layer.extent;\n\n\t\t\t\tvar layerStyle = this.options.vectorTileLayerStyles[ layerName ] ||\n\t\t\t\tL.Path.prototype.options;\n\n\t\t\t\tfor (var i in layer.features) {\n\t\t\t\t\tvar feat = layer.features[i];\n\t\t\t\t\tthis._mkFeatureParts(feat, pxPerExtent);\n\n\t\t\t\t\t/// Style can be a callback that is passed the feature's\n\t\t\t\t\t/// properties and tile zoom level...\n\t\t\t\t\tvar styleOptions = (layerStyle instanceof Function) ?\n\t\t\t\t\tlayerStyle(feat.properties, coords.z) :\n\t\t\t\t\tlayerStyle;\n\n\t\t\t\t\tif (!(styleOptions instanceof Array)) {\n\t\t\t\t\t\tstyleOptions = [styleOptions];\n\t\t\t\t\t}\n\n\t\t\t\t\t/// Style can be an array of styles, for styling a feature\n\t\t\t\t\t/// more than once...\n\t\t\t\t\tfor (var j in styleOptions) {\n\t\t\t\t\t\tvar style = L.extend({}, L.Path.prototype.options, styleOptions[j]);\n\n\t\t\t\t\t\tif (feat.type === 1) { // Points\n\t\t\t\t\t\t\tstyle.fill = false;\n\t\t\t\t\t\t} else if (feat.type === 2) {\t// Polyline\n\t\t\t\t\t\t\tstyle.fill = false;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfeat.options = style;\n\t\t\t\t\t\trenderer._initPath( feat );\n\t\t\t\t\t\trenderer._updateStyle( feat );\n\n\t\t\t\t\t\tif (feat.type === 1) { // Points\n\t\t\t\t\t\t\t// \t\t\t\t\t\t\tstyle.fill = false;\n\t\t\t\t\t\t} else if (feat.type === 2) {\t// Polyline\n\t\t\t\t\t\t\tstyle.fill = false;\n\t\t\t\t\t\t\trenderer._updatePoly(feat, false);\n\t\t\t\t\t\t} else if (feat.type === 3) {\t// Polygon\n\t\t\t\t\t\t\trenderer._updatePoly(feat, true);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\trenderer._addPath( feat );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\t\t\tL.Util.requestAnimFrame(done);\n\t\t}.bind(this));\n\n\t\treturn renderer.getContainer();\n\t},\n\n\n\n\t// Fills up feat._parts based on the geometry and pxPerExtent,\n\t// pretty much as L.Polyline._projectLatLngs and L.Polyline._clipPoints\n\t// would do but simplified as the vectors are already simplified/clipped.\n\t_mkFeatureParts: function(feat, pxPerExtent) {\n\n\t\tvar rings = feat.geometry;\n\n\t\tfeat._parts = [];\n\t\tfor (var i in rings) {\n\t\t\tvar ring = rings[i];\n\t\t\tvar part = [];\n\t\t\tfor (var j in ring) {\n\t\t\t\tvar coord = ring[j];\n\t\t\t\tif ('x' in coord) {\n\t\t\t\t\t// Protobuf vector tiles return {x: , y:}\n\t\t\t\t\tpart.push(L.point(coord.x * pxPerExtent, coord.y * pxPerExtent));\n\t\t\t\t} else {\n\t\t\t\t\t// Geojson-vt returns [,]\n\t\t\t\t\tpart.push(L.point(coord[0] * pxPerExtent, coord[1] * pxPerExtent));\n\t\t\t\t}\n\t\t\t}\n\t\t\tfeat._parts.push(part);\n\t\t}\n\n\t},\n\n});\n\n\n\nL.vectorGrid = function (options) {\n\treturn new L.VectorGrid(options);\n};\n\n\n\n","\n\n\n// geojson-vt powered!\n// NOTE: Assumes the global `geojsonvt` exists!!!\nL.VectorGrid.Slicer = L.VectorGrid.extend({\n\n\toptions: {\n\t\tvectorTileLayerName: 'sliced',\n\t\textent: 4096\t// Default for geojson-vt\n\t},\n\n\tinitialize: function(geojson, options) {\n\t\tL.VectorGrid.prototype.initialize.call(this, options);\n\n\n\t\tthis._slicers = {};\n\t\tif (geojson.type && geojson.type === 'Topology') {\n\t\t\t// geojson is really a topojson\n\t\t\tfor (var layerName in geojson.objects) {\n\t\t\t\tthis._slicers[layerName] = geojsonvt(\n\t\t\t\t\ttopojson.feature(geojson, geojson.objects[layerName])\n\t\t\t\t, this.options);\n\t\t\t}\n\t\t} else {\n\t\t\t// For a geojson, create just one vectortilelayer named with the value\n\t\t\t// of the option.\n\t\t\t// Inherits available options from geojson-vt!\n\t\t\tthis._slicers[options.vectorTileLayerName] = geojsonvt(geojson, this.options);\n\t\t}\n\n\t},\n\n\t_getVectorTilePromise: function(coords) {\n\n\t\tvar tileLayers = {};\n\n\t\tfor (var layerName in this._slicers) {\n\t\t\tvar slicer = this._slicers[layerName];\n\t\t\tvar slicedTileLayer = slicer.getTile(coords.z, coords.x, coords.y);\n\n\t\t\tif (slicedTileLayer) {\n\t\t\t\tvar vectorTileLayer = {\n\t\t\t\t\tfeatures: [],\n\t\t\t\t\textent: this.options.extent,\n\t\t\t\t\tname: this.options.vectorTileLayerName,\n\t\t\t\t\tlength: slicedTileLayer.features.length\n\t\t\t\t}\n\n\t\t\t\tfor (var i in slicedTileLayer.features) {\n\t\t\t\t\tvar feat = {\n\t\t\t\t\t\tgeometry: slicedTileLayer.features[i].geometry,\n\t\t\t\t\t\tproperties: slicedTileLayer.features[i].tags,\n\t\t\t\t\t\ttype: slicedTileLayer.features[i].type\t// 1 = point, 2 = line, 3 = polygon\n\t\t\t\t\t}\n\t\t\t\t\tvectorTileLayer.features.push(feat);\n\t\t\t\t}\n\n\t\t\t\ttileLayers[layerName] = vectorTileLayer;\n\t\t\t}\n\n\t\t}\n\n\t\treturn new Promise(function(resolve){ return resolve({ layers: tileLayers })});\n\t},\n\t\n});\n\n\nL.vectorGrid.slicer = function (geojson, options) {\n\treturn new L.VectorGrid.Slicer(geojson, options);\n};\n\n","\n// Network & Protobuf powered!\n// NOTE: Assumes the globals `VectorTile` and `Pbf` exist!!!\nL.VectorGrid.Protobuf = L.VectorGrid.extend({\n\n\toptions: {\n\t\tsubdomains: 'abc',\t// Like L.TileLayer\n\t},\n\n\n\tinitialize: function(url, options) {\n\t\t// Inherits options from geojson-vt!\n// \t\tthis._slicer = geojsonvt(geojson, options);\n\t\tthis._url = url;\n\t\tL.VectorGrid.prototype.initialize.call(this, options);\n\t},\n\n\n\t_getSubdomain: L.TileLayer.prototype._getSubdomain,\n\n\n\t_getVectorTilePromise: function(coords) {\n\t\tvar tileUrl = L.Util.template(this._url, L.extend({\n\t\t\ts: this._getSubdomain(coords),\n\t\t\tx: coords.x,\n\t\t\ty: coords.y,\n\t\t\tz: coords.z\n// \t\t\tz: this._getZoomForUrl()\t/// TODO: Maybe replicate TileLayer's maxNativeZoom\n\t\t}, this.options));\n\n\t\treturn fetch(tileUrl).then(function(response){\n\n\t\t\tif (!response.ok) {\n\t\t\t\treturn {layers:[]};\n\t\t\t}\n\n\t\t\treturn response.blob().then( function (blob) {\n// \t\t\t\tconsole.log(blob);\n\n\t\t\t\tvar reader = new FileReader();\n\t\t\t\treturn new Promise(function(resolve){\n\t\t\t\t\treader.addEventListener(\"loadend\", function() {\n\t\t\t\t\t\t// reader.result contains the contents of blob as a typed array\n\n\t\t\t\t\t\t// blob.type === 'application/x-protobuf'\n\t\t\t\t\t\tvar pbf = new Pbf( reader.result );\n// \t\t\t\t\t\tconsole.log(pbf);\n\t\t\t\t\t\treturn resolve(new vectorTile.VectorTile( pbf ));\n\n\t\t\t\t\t});\n\t\t\t\t\treader.readAsArrayBuffer(blob);\n\t\t\t\t});\n\t\t\t});\n\t\t}).then(function(json){\n\n// \t\t\tconsole.log('Vector tile:', json.layers);\n// \t\t\tconsole.log('Vector tile water:', json.layers.water);\t// Instance of VectorTileLayer\n\n\t\t\t// Normalize feature getters into actual instanced features\n\t\t\tfor (var layerName in json.layers) {\n\t\t\t\tvar feats = [];\n\n\t\t\t\tfor (var i=0; i<json.layers[layerName].length; i++) {\n\t\t\t\t\tvar feat = json.layers[layerName].feature(i);\n\t\t\t\t\tfeat.geometry = feat.loadGeometry();\n\t\t\t\t\tfeats.push(feat);\n\t\t\t\t}\n\n\t\t\t\tjson.layers[layerName].features = feats;\n\t\t\t}\n\n\t\t\treturn json;\n\t\t});\n\t}\n});\n\n\nL.vectorGrid.protobuf = function (url, options) {\n\treturn new L.VectorGrid.Protobuf(url, options);\n};\n\n","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict';\n\nmodule.exports = clip;\n\n/* clip features between two axis-parallel lines:\n *     |        |\n *  ___|___     |     /\n * /   |   \\____|____/\n *     |        |\n */\n\nfunction clip(features, scale, k1, k2, axis, intersect, minAll, maxAll) {\n\n    k1 /= scale;\n    k2 /= scale;\n\n    if (minAll >= k1 && maxAll <= k2) return features; // trivial accept\n    else if (minAll > k2 || maxAll < k1) return null; // trivial reject\n\n    var clipped = [];\n\n    for (var i = 0; i < features.length; i++) {\n\n        var feature = features[i],\n            geometry = feature.geometry,\n            type = feature.type,\n            min, max;\n\n        min = feature.min[axis];\n        max = feature.max[axis];\n\n        if (min >= k1 && max <= k2) { // trivial accept\n            clipped.push(feature);\n            continue;\n        } else if (min > k2 || max < k1) continue; // trivial reject\n\n        var slices = type === 1 ?\n                clipPoints(geometry, k1, k2, axis) :\n                clipGeometry(geometry, k1, k2, axis, intersect, type === 3);\n\n        if (slices.length) {\n            // if a feature got clipped, it will likely get clipped on the next zoom level as well,\n            // so there's no need to recalculate bboxes\n            clipped.push({\n                geometry: slices,\n                type: type,\n                tags: features[i].tags || null,\n                min: feature.min,\n                max: feature.max\n            });\n        }\n    }\n\n    return clipped.length ? clipped : null;\n}\n\nfunction clipPoints(geometry, k1, k2, axis) {\n    var slice = [];\n\n    for (var i = 0; i < geometry.length; i++) {\n        var a = geometry[i],\n            ak = a[axis];\n\n        if (ak >= k1 && ak <= k2) slice.push(a);\n    }\n    return slice;\n}\n\nfunction clipGeometry(geometry, k1, k2, axis, intersect, closed) {\n\n    var slices = [];\n\n    for (var i = 0; i < geometry.length; i++) {\n\n        var ak = 0,\n            bk = 0,\n            b = null,\n            points = geometry[i],\n            area = points.area,\n            dist = points.dist,\n            len = points.length,\n            a, j, last;\n\n        var slice = [];\n\n        for (j = 0; j < len - 1; j++) {\n            a = b || points[j];\n            b = points[j + 1];\n            ak = bk || a[axis];\n            bk = b[axis];\n\n            if (ak < k1) {\n\n                if ((bk > k2)) { // ---|-----|-->\n                    slice.push(intersect(a, b, k1), intersect(a, b, k2));\n                    if (!closed) slice = newSlice(slices, slice, area, dist);\n\n                } else if (bk >= k1) slice.push(intersect(a, b, k1)); // ---|-->  |\n\n            } else if (ak > k2) {\n\n                if ((bk < k1)) { // <--|-----|---\n                    slice.push(intersect(a, b, k2), intersect(a, b, k1));\n                    if (!closed) slice = newSlice(slices, slice, area, dist);\n\n                } else if (bk <= k2) slice.push(intersect(a, b, k2)); // |  <--|---\n\n            } else {\n\n                slice.push(a);\n\n                if (bk < k1) { // <--|---  |\n                    slice.push(intersect(a, b, k1));\n                    if (!closed) slice = newSlice(slices, slice, area, dist);\n\n                } else if (bk > k2) { // |  ---|-->\n                    slice.push(intersect(a, b, k2));\n                    if (!closed) slice = newSlice(slices, slice, area, dist);\n                }\n                // | --> |\n            }\n        }\n\n        // add the last point\n        a = points[len - 1];\n        ak = a[axis];\n        if (ak >= k1 && ak <= k2) slice.push(a);\n\n        // close the polygon if its endpoints are not the same after clipping\n\n        last = slice[slice.length - 1];\n        if (closed && last && (slice[0][0] !== last[0] || slice[0][1] !== last[1])) slice.push(slice[0]);\n\n        // add the final slice\n        newSlice(slices, slice, area, dist);\n    }\n\n    return slices;\n}\n\nfunction newSlice(slices, slice, area, dist) {\n    if (slice.length) {\n        // we don't recalculate the area/length of the unclipped geometry because the case where it goes\n        // below the visibility threshold as a result of clipping is rare, so we avoid doing unnecessary work\n        slice.area = area;\n        slice.dist = dist;\n\n        slices.push(slice);\n    }\n    return [];\n}\n","'use strict';\n\nmodule.exports = convert;\n\nvar simplify = require('./simplify');\n\n// converts GeoJSON feature into an intermediate projected JSON vector format with simplification data\n\nfunction convert(data, tolerance) {\n    var features = [];\n\n    if (data.type === 'FeatureCollection') {\n        for (var i = 0; i < data.features.length; i++) {\n            convertFeature(features, data.features[i], tolerance);\n        }\n    } else if (data.type === 'Feature') {\n        convertFeature(features, data, tolerance);\n\n    } else {\n        // single geometry or a geometry collection\n        convertFeature(features, {geometry: data}, tolerance);\n    }\n    return features;\n}\n\nfunction convertFeature(features, feature, tolerance) {\n    var geom = feature.geometry,\n        type = geom.type,\n        coords = geom.coordinates,\n        tags = feature.properties,\n        i, j, rings;\n\n    if (type === 'Point') {\n        features.push(create(tags, 1, [projectPoint(coords)]));\n\n    } else if (type === 'MultiPoint') {\n        features.push(create(tags, 1, project(coords)));\n\n    } else if (type === 'LineString') {\n        features.push(create(tags, 2, [project(coords, tolerance)]));\n\n    } else if (type === 'MultiLineString' || type === 'Polygon') {\n        rings = [];\n        for (i = 0; i < coords.length; i++) {\n            rings.push(project(coords[i], tolerance));\n        }\n        features.push(create(tags, type === 'Polygon' ? 3 : 2, rings));\n\n    } else if (type === 'MultiPolygon') {\n        rings = [];\n        for (i = 0; i < coords.length; i++) {\n            for (j = 0; j < coords[i].length; j++) {\n                rings.push(project(coords[i][j], tolerance));\n            }\n        }\n        features.push(create(tags, 3, rings));\n\n    } else if (type === 'GeometryCollection') {\n        for (i = 0; i < geom.geometries.length; i++) {\n            convertFeature(features, {\n                geometry: geom.geometries[i],\n                properties: tags\n            }, tolerance);\n        }\n\n    } else {\n        throw new Error('Input data is not a valid GeoJSON object.');\n    }\n}\n\nfunction create(tags, type, geometry) {\n    var feature = {\n        geometry: geometry,\n        type: type,\n        tags: tags || null,\n        min: [2, 1], // initial bbox values;\n        max: [-1, 0]  // note that coords are usually in [0..1] range\n    };\n    calcBBox(feature);\n    return feature;\n}\n\nfunction project(lonlats, tolerance) {\n    var projected = [];\n    for (var i = 0; i < lonlats.length; i++) {\n        projected.push(projectPoint(lonlats[i]));\n    }\n    if (tolerance) {\n        simplify(projected, tolerance);\n        calcSize(projected);\n    }\n    return projected;\n}\n\nfunction projectPoint(p) {\n    var sin = Math.sin(p[1] * Math.PI / 180),\n        x = (p[0] / 360 + 0.5),\n        y = (0.5 - 0.25 * Math.log((1 + sin) / (1 - sin)) / Math.PI);\n\n    y = y < -1 ? -1 :\n        y > 1 ? 1 : y;\n\n    return [x, y, 0];\n}\n\n// calculate area and length of the poly\nfunction calcSize(points) {\n    var area = 0,\n        dist = 0;\n\n    for (var i = 0, a, b; i < points.length - 1; i++) {\n        a = b || points[i];\n        b = points[i + 1];\n\n        area += a[0] * b[1] - b[0] * a[1];\n\n        // use Manhattan distance instead of Euclidian one to avoid expensive square root computation\n        dist += Math.abs(b[0] - a[0]) + Math.abs(b[1] - a[1]);\n    }\n    points.area = Math.abs(area / 2);\n    points.dist = dist;\n}\n\n// calculate the feature bounding box for faster clipping later\nfunction calcBBox(feature) {\n    var geometry = feature.geometry,\n        min = feature.min,\n        max = feature.max;\n\n    if (feature.type === 1) calcRingBBox(min, max, geometry);\n    else for (var i = 0; i < geometry.length; i++) calcRingBBox(min, max, geometry[i]);\n\n    return feature;\n}\n\nfunction calcRingBBox(min, max, points) {\n    for (var i = 0, p; i < points.length; i++) {\n        p = points[i];\n        min[0] = Math.min(p[0], min[0]);\n        max[0] = Math.max(p[0], max[0]);\n        min[1] = Math.min(p[1], min[1]);\n        max[1] = Math.max(p[1], max[1]);\n    }\n}\n","'use strict';\n\nmodule.exports = geojsonvt;\n\nvar convert = require('./convert'),     // GeoJSON conversion and preprocessing\n    transform = require('./transform'), // coordinate transformation\n    clip = require('./clip'),           // stripe clipping algorithm\n    wrap = require('./wrap'),           // date line processing\n    createTile = require('./tile');     // final simplified tile generation\n\n\nfunction geojsonvt(data, options) {\n    return new GeoJSONVT(data, options);\n}\n\nfunction GeoJSONVT(data, options) {\n    options = this.options = extend(Object.create(this.options), options);\n\n    var debug = options.debug;\n\n    if (debug) console.time('preprocess data');\n\n    var z2 = 1 << options.maxZoom, // 2^z\n        features = convert(data, options.tolerance / (z2 * options.extent));\n\n    this.tiles = {};\n    this.tileCoords = [];\n\n    if (debug) {\n        console.timeEnd('preprocess data');\n        console.log('index: maxZoom: %d, maxPoints: %d', options.indexMaxZoom, options.indexMaxPoints);\n        console.time('generate tiles');\n        this.stats = {};\n        this.total = 0;\n    }\n\n    features = wrap(features, options.buffer / options.extent, intersectX);\n\n    // start slicing from the top tile down\n    if (features.length) this.splitTile(features, 0, 0, 0);\n\n    if (debug) {\n        if (features.length) console.log('features: %d, points: %d', this.tiles[0].numFeatures, this.tiles[0].numPoints);\n        console.timeEnd('generate tiles');\n        console.log('tiles generated:', this.total, JSON.stringify(this.stats));\n    }\n}\n\nGeoJSONVT.prototype.options = {\n    maxZoom: 14,            // max zoom to preserve detail on\n    indexMaxZoom: 5,        // max zoom in the tile index\n    indexMaxPoints: 100000, // max number of points per tile in the tile index\n    solidChildren: false,   // whether to tile solid square tiles further\n    tolerance: 3,           // simplification tolerance (higher means simpler)\n    extent: 4096,           // tile extent\n    buffer: 64,             // tile buffer on each side\n    debug: 0                // logging level (0, 1 or 2)\n};\n\nGeoJSONVT.prototype.splitTile = function (features, z, x, y, cz, cx, cy) {\n\n    var stack = [features, z, x, y],\n        options = this.options,\n        debug = options.debug,\n        solid = null;\n\n    // avoid recursion by using a processing queue\n    while (stack.length) {\n        y = stack.pop();\n        x = stack.pop();\n        z = stack.pop();\n        features = stack.pop();\n\n        var z2 = 1 << z,\n            id = toID(z, x, y),\n            tile = this.tiles[id],\n            tileTolerance = z === options.maxZoom ? 0 : options.tolerance / (z2 * options.extent);\n\n        if (!tile) {\n            if (debug > 1) console.time('creation');\n\n            tile = this.tiles[id] = createTile(features, z2, x, y, tileTolerance, z === options.maxZoom);\n            this.tileCoords.push({z: z, x: x, y: y});\n\n            if (debug) {\n                if (debug > 1) {\n                    console.log('tile z%d-%d-%d (features: %d, points: %d, simplified: %d)',\n                        z, x, y, tile.numFeatures, tile.numPoints, tile.numSimplified);\n                    console.timeEnd('creation');\n                }\n                var key = 'z' + z;\n                this.stats[key] = (this.stats[key] || 0) + 1;\n                this.total++;\n            }\n        }\n\n        // save reference to original geometry in tile so that we can drill down later if we stop now\n        tile.source = features;\n\n        // if it's the first-pass tiling\n        if (!cz) {\n            // stop tiling if we reached max zoom, or if the tile is too simple\n            if (z === options.indexMaxZoom || tile.numPoints <= options.indexMaxPoints) continue;\n\n        // if a drilldown to a specific tile\n        } else {\n            // stop tiling if we reached base zoom or our target tile zoom\n            if (z === options.maxZoom || z === cz) continue;\n\n            // stop tiling if it's not an ancestor of the target tile\n            var m = 1 << (cz - z);\n            if (x !== Math.floor(cx / m) || y !== Math.floor(cy / m)) continue;\n        }\n\n        // stop tiling if the tile is solid clipped square\n        if (!options.solidChildren && isClippedSquare(tile, options.extent, options.buffer)) {\n            if (cz) solid = z; // and remember the zoom if we're drilling down\n            continue;\n        }\n\n        // if we slice further down, no need to keep source geometry\n        tile.source = null;\n\n        if (debug > 1) console.time('clipping');\n\n        // values we'll use for clipping\n        var k1 = 0.5 * options.buffer / options.extent,\n            k2 = 0.5 - k1,\n            k3 = 0.5 + k1,\n            k4 = 1 + k1,\n            tl, bl, tr, br, left, right;\n\n        tl = bl = tr = br = null;\n\n        left  = clip(features, z2, x - k1, x + k3, 0, intersectX, tile.min[0], tile.max[0]);\n        right = clip(features, z2, x + k2, x + k4, 0, intersectX, tile.min[0], tile.max[0]);\n\n        if (left) {\n            tl = clip(left, z2, y - k1, y + k3, 1, intersectY, tile.min[1], tile.max[1]);\n            bl = clip(left, z2, y + k2, y + k4, 1, intersectY, tile.min[1], tile.max[1]);\n        }\n\n        if (right) {\n            tr = clip(right, z2, y - k1, y + k3, 1, intersectY, tile.min[1], tile.max[1]);\n            br = clip(right, z2, y + k2, y + k4, 1, intersectY, tile.min[1], tile.max[1]);\n        }\n\n        if (debug > 1) console.timeEnd('clipping');\n\n        if (tl) stack.push(tl, z + 1, x * 2,     y * 2);\n        if (bl) stack.push(bl, z + 1, x * 2,     y * 2 + 1);\n        if (tr) stack.push(tr, z + 1, x * 2 + 1, y * 2);\n        if (br) stack.push(br, z + 1, x * 2 + 1, y * 2 + 1);\n    }\n\n    return solid;\n};\n\nGeoJSONVT.prototype.getTile = function (z, x, y) {\n    var options = this.options,\n        extent = options.extent,\n        debug = options.debug;\n\n    var z2 = 1 << z;\n    x = ((x % z2) + z2) % z2; // wrap tile x coordinate\n\n    var id = toID(z, x, y);\n    if (this.tiles[id]) return transform.tile(this.tiles[id], extent);\n\n    if (debug > 1) console.log('drilling down to z%d-%d-%d', z, x, y);\n\n    var z0 = z,\n        x0 = x,\n        y0 = y,\n        parent;\n\n    while (!parent && z0 > 0) {\n        z0--;\n        x0 = Math.floor(x0 / 2);\n        y0 = Math.floor(y0 / 2);\n        parent = this.tiles[toID(z0, x0, y0)];\n    }\n\n    if (!parent || !parent.source) return null;\n\n    // if we found a parent tile containing the original geometry, we can drill down from it\n    if (debug > 1) console.log('found parent tile z%d-%d-%d', z0, x0, y0);\n\n    // it parent tile is a solid clipped square, return it instead since it's identical\n    if (isClippedSquare(parent, extent, options.buffer)) return transform.tile(parent, extent);\n\n    if (debug > 1) console.time('drilling down');\n    var solid = this.splitTile(parent.source, z0, x0, y0, z, x, y);\n    if (debug > 1) console.timeEnd('drilling down');\n\n    // one of the parent tiles was a solid clipped square\n    if (solid !== null) {\n        var m = 1 << (z - solid);\n        id = toID(solid, Math.floor(x / m), Math.floor(y / m));\n    }\n\n    return this.tiles[id] ? transform.tile(this.tiles[id], extent) : null;\n};\n\nfunction toID(z, x, y) {\n    return (((1 << z) * y + x) * 32) + z;\n}\n\nfunction intersectX(a, b, x) {\n    return [x, (x - a[0]) * (b[1] - a[1]) / (b[0] - a[0]) + a[1], 1];\n}\nfunction intersectY(a, b, y) {\n    return [(y - a[1]) * (b[0] - a[0]) / (b[1] - a[1]) + a[0], y, 1];\n}\n\nfunction extend(dest, src) {\n    for (var i in src) dest[i] = src[i];\n    return dest;\n}\n\n// checks whether a tile is a whole-area fill after clipping; if it is, there's no sense slicing it further\nfunction isClippedSquare(tile, extent, buffer) {\n\n    var features = tile.source;\n    if (features.length !== 1) return false;\n\n    var feature = features[0];\n    if (feature.type !== 3 || feature.geometry.length > 1) return false;\n\n    var len = feature.geometry[0].length;\n    if (len !== 5) return false;\n\n    for (var i = 0; i < len; i++) {\n        var p = transform.point(feature.geometry[0][i], extent, tile.z2, tile.x, tile.y);\n        if ((p[0] !== -buffer && p[0] !== extent + buffer) ||\n            (p[1] !== -buffer && p[1] !== extent + buffer)) return false;\n    }\n\n    return true;\n}\n","'use strict';\n\nmodule.exports = simplify;\n\n// calculate simplification data using optimized Douglas-Peucker algorithm\n\nfunction simplify(points, tolerance) {\n\n    var sqTolerance = tolerance * tolerance,\n        len = points.length,\n        first = 0,\n        last = len - 1,\n        stack = [],\n        i, maxSqDist, sqDist, index;\n\n    // always retain the endpoints (1 is the max value)\n    points[first][2] = 1;\n    points[last][2] = 1;\n\n    // avoid recursion by using a stack\n    while (last) {\n\n        maxSqDist = 0;\n\n        for (i = first + 1; i < last; i++) {\n            sqDist = getSqSegDist(points[i], points[first], points[last]);\n\n            if (sqDist > maxSqDist) {\n                index = i;\n                maxSqDist = sqDist;\n            }\n        }\n\n        if (maxSqDist > sqTolerance) {\n            points[index][2] = maxSqDist; // save the point importance in squared pixels as a z coordinate\n            stack.push(first);\n            stack.push(index);\n            first = index;\n\n        } else {\n            last = stack.pop();\n            first = stack.pop();\n        }\n    }\n}\n\n// square distance from a point to a segment\nfunction getSqSegDist(p, a, b) {\n\n    var x = a[0], y = a[1],\n        bx = b[0], by = b[1],\n        px = p[0], py = p[1],\n        dx = bx - x,\n        dy = by - y;\n\n    if (dx !== 0 || dy !== 0) {\n\n        var t = ((px - x) * dx + (py - y) * dy) / (dx * dx + dy * dy);\n\n        if (t > 1) {\n            x = bx;\n            y = by;\n\n        } else if (t > 0) {\n            x += dx * t;\n            y += dy * t;\n        }\n    }\n\n    dx = px - x;\n    dy = py - y;\n\n    return dx * dx + dy * dy;\n}\n","'use strict';\n\nmodule.exports = createTile;\n\nfunction createTile(features, z2, tx, ty, tolerance, noSimplify) {\n    var tile = {\n        features: [],\n        numPoints: 0,\n        numSimplified: 0,\n        numFeatures: 0,\n        source: null,\n        x: tx,\n        y: ty,\n        z2: z2,\n        transformed: false,\n        min: [2, 1],\n        max: [-1, 0]\n    };\n    for (var i = 0; i < features.length; i++) {\n        tile.numFeatures++;\n        addFeature(tile, features[i], tolerance, noSimplify);\n\n        var min = features[i].min,\n            max = features[i].max;\n\n        if (min[0] < tile.min[0]) tile.min[0] = min[0];\n        if (min[1] < tile.min[1]) tile.min[1] = min[1];\n        if (max[0] > tile.max[0]) tile.max[0] = max[0];\n        if (max[1] > tile.max[1]) tile.max[1] = max[1];\n    }\n    return tile;\n}\n\nfunction addFeature(tile, feature, tolerance, noSimplify) {\n\n    var geom = feature.geometry,\n        type = feature.type,\n        simplified = [],\n        sqTolerance = tolerance * tolerance,\n        i, j, ring, p;\n\n    if (type === 1) {\n        for (i = 0; i < geom.length; i++) {\n            simplified.push(geom[i]);\n            tile.numPoints++;\n            tile.numSimplified++;\n        }\n\n    } else {\n\n        // simplify and transform projected coordinates for tile geometry\n        for (i = 0; i < geom.length; i++) {\n            ring = geom[i];\n\n            // filter out tiny polylines & polygons\n            if (!noSimplify && ((type === 2 && ring.dist < tolerance) ||\n                                (type === 3 && ring.area < sqTolerance))) {\n                tile.numPoints += ring.length;\n                continue;\n            }\n\n            var simplifiedRing = [];\n\n            for (j = 0; j < ring.length; j++) {\n                p = ring[j];\n                // keep points with importance > tolerance\n                if (noSimplify || p[2] > sqTolerance) {\n                    simplifiedRing.push(p);\n                    tile.numSimplified++;\n                }\n                tile.numPoints++;\n            }\n\n            simplified.push(simplifiedRing);\n        }\n    }\n\n    if (simplified.length) {\n        tile.features.push({\n            geometry: simplified,\n            type: type,\n            tags: feature.tags || null\n        });\n    }\n}\n","'use strict';\n\nexports.tile = transformTile;\nexports.point = transformPoint;\n\n// Transforms the coordinates of each feature in the given tile from\n// mercator-projected space into (extent x extent) tile space.\nfunction transformTile(tile, extent) {\n    if (tile.transformed) return tile;\n\n    var z2 = tile.z2,\n        tx = tile.x,\n        ty = tile.y,\n        i, j, k;\n\n    for (i = 0; i < tile.features.length; i++) {\n        var feature = tile.features[i],\n            geom = feature.geometry,\n            type = feature.type;\n\n        if (type === 1) {\n            for (j = 0; j < geom.length; j++) geom[j] = transformPoint(geom[j], extent, z2, tx, ty);\n\n        } else {\n            for (j = 0; j < geom.length; j++) {\n                var ring = geom[j];\n                for (k = 0; k < ring.length; k++) ring[k] = transformPoint(ring[k], extent, z2, tx, ty);\n            }\n        }\n    }\n\n    tile.transformed = true;\n\n    return tile;\n}\n\nfunction transformPoint(p, extent, z2, tx, ty) {\n    var x = Math.round(extent * (p[0] * z2 - tx)),\n        y = Math.round(extent * (p[1] * z2 - ty));\n    return [x, y];\n}\n","'use strict';\n\nvar clip = require('./clip');\n\nmodule.exports = wrap;\n\nfunction wrap(features, buffer, intersectX) {\n    var merged = features,\n        left  = clip(features, 1, -1 - buffer, buffer,     0, intersectX, -1, 2), // left world copy\n        right = clip(features, 1,  1 - buffer, 2 + buffer, 0, intersectX, -1, 2); // right world copy\n\n    if (left || right) {\n        merged = clip(features, 1, -buffer, 1 + buffer, 0, intersectX, -1, 2); // center world copy\n\n        if (left) merged = shiftFeatureCoords(left, 1).concat(merged); // merge left into center\n        if (right) merged = merged.concat(shiftFeatureCoords(right, -1)); // merge right into center\n    }\n\n    return merged;\n}\n\nfunction shiftFeatureCoords(features, offset) {\n    var newFeatures = [];\n\n    for (var i = 0; i < features.length; i++) {\n        var feature = features[i],\n            type = feature.type;\n\n        var newGeometry;\n\n        if (type === 1) {\n            newGeometry = shiftCoords(feature.geometry, offset);\n        } else {\n            newGeometry = [];\n            for (var j = 0; j < feature.geometry.length; j++) {\n                newGeometry.push(shiftCoords(feature.geometry[j], offset));\n            }\n        }\n\n        newFeatures.push({\n            geometry: newGeometry,\n            type: type,\n            tags: feature.tags,\n            min: [feature.min[0] + offset, feature.min[1]],\n            max: [feature.max[0] + offset, feature.max[1]]\n        });\n    }\n\n    return newFeatures;\n}\n\nfunction shiftCoords(points, offset) {\n    var newPoints = [];\n    newPoints.area = points.area;\n    newPoints.dist = points.dist;\n\n    for (var i = 0; i < points.length; i++) {\n        newPoints.push([points[i][0] + offset, points[i][1], points[i][2]]);\n    }\n    return newPoints;\n}\n","'use strict';\n\n// lightweight Buffer shim for pbf browser build\n// based on code from github.com/feross/buffer (MIT-licensed)\n\nmodule.exports = Buffer;\n\nvar ieee754 = require('ieee754');\n\nvar BufferMethods;\n\nfunction Buffer(length) {\n    var arr;\n    if (length && length.length) {\n        arr = length;\n        length = arr.length;\n    }\n    var buf = new Uint8Array(length || 0);\n    if (arr) buf.set(arr);\n\n    buf.readUInt32LE = BufferMethods.readUInt32LE;\n    buf.writeUInt32LE = BufferMethods.writeUInt32LE;\n    buf.readInt32LE = BufferMethods.readInt32LE;\n    buf.writeInt32LE = BufferMethods.writeInt32LE;\n    buf.readFloatLE = BufferMethods.readFloatLE;\n    buf.writeFloatLE = BufferMethods.writeFloatLE;\n    buf.readDoubleLE = BufferMethods.readDoubleLE;\n    buf.writeDoubleLE = BufferMethods.writeDoubleLE;\n    buf.toString = BufferMethods.toString;\n    buf.write = BufferMethods.write;\n    buf.slice = BufferMethods.slice;\n    buf.copy = BufferMethods.copy;\n\n    buf._isBuffer = true;\n    return buf;\n}\n\nvar lastStr, lastStrEncoded;\n\nBufferMethods = {\n    readUInt32LE: function(pos) {\n        return ((this[pos]) |\n            (this[pos + 1] << 8) |\n            (this[pos + 2] << 16)) +\n            (this[pos + 3] * 0x1000000);\n    },\n\n    writeUInt32LE: function(val, pos) {\n        this[pos] = val;\n        this[pos + 1] = (val >>> 8);\n        this[pos + 2] = (val >>> 16);\n        this[pos + 3] = (val >>> 24);\n    },\n\n    readInt32LE: function(pos) {\n        return ((this[pos]) |\n            (this[pos + 1] << 8) |\n            (this[pos + 2] << 16)) +\n            (this[pos + 3] << 24);\n    },\n\n    readFloatLE:  function(pos) { return ieee754.read(this, pos, true, 23, 4); },\n    readDoubleLE: function(pos) { return ieee754.read(this, pos, true, 52, 8); },\n\n    writeFloatLE:  function(val, pos) { return ieee754.write(this, val, pos, true, 23, 4); },\n    writeDoubleLE: function(val, pos) { return ieee754.write(this, val, pos, true, 52, 8); },\n\n    toString: function(encoding, start, end) {\n        var str = '',\n            tmp = '';\n\n        start = start || 0;\n        end = Math.min(this.length, end || this.length);\n\n        for (var i = start; i < end; i++) {\n            var ch = this[i];\n            if (ch <= 0x7F) {\n                str += decodeURIComponent(tmp) + String.fromCharCode(ch);\n                tmp = '';\n            } else {\n                tmp += '%' + ch.toString(16);\n            }\n        }\n\n        str += decodeURIComponent(tmp);\n\n        return str;\n    },\n\n    write: function(str, pos) {\n        var bytes = str === lastStr ? lastStrEncoded : encodeString(str);\n        for (var i = 0; i < bytes.length; i++) {\n            this[pos + i] = bytes[i];\n        }\n    },\n\n    slice: function(start, end) {\n        return this.subarray(start, end);\n    },\n\n    copy: function(buf, pos) {\n        pos = pos || 0;\n        for (var i = 0; i < this.length; i++) {\n            buf[pos + i] = this[i];\n        }\n    }\n};\n\nBufferMethods.writeInt32LE = BufferMethods.writeUInt32LE;\n\nBuffer.byteLength = function(str) {\n    lastStr = str;\n    lastStrEncoded = encodeString(str);\n    return lastStrEncoded.length;\n};\n\nBuffer.isBuffer = function(buf) {\n    return !!(buf && buf._isBuffer);\n};\n\nfunction encodeString(str) {\n    var length = str.length,\n        bytes = [];\n\n    for (var i = 0, c, lead; i < length; i++) {\n        c = str.charCodeAt(i); // code point\n\n        if (c > 0xD7FF && c < 0xE000) {\n\n            if (lead) {\n                if (c < 0xDC00) {\n                    bytes.push(0xEF, 0xBF, 0xBD);\n                    lead = c;\n                    continue;\n\n                } else {\n                    c = lead - 0xD800 << 10 | c - 0xDC00 | 0x10000;\n                    lead = null;\n                }\n\n            } else {\n                if (c > 0xDBFF || (i + 1 === length)) bytes.push(0xEF, 0xBF, 0xBD);\n                else lead = c;\n\n                continue;\n            }\n\n        } else if (lead) {\n            bytes.push(0xEF, 0xBF, 0xBD);\n            lead = null;\n        }\n\n        if (c < 0x80) bytes.push(c);\n        else if (c < 0x800) bytes.push(c >> 0x6 | 0xC0, c & 0x3F | 0x80);\n        else if (c < 0x10000) bytes.push(c >> 0xC | 0xE0, c >> 0x6 & 0x3F | 0x80, c & 0x3F | 0x80);\n        else bytes.push(c >> 0x12 | 0xF0, c >> 0xC & 0x3F | 0x80, c >> 0x6 & 0x3F | 0x80, c & 0x3F | 0x80);\n    }\n    return bytes;\n}\n","module.exports.VectorTile = require('./lib/vectortile.js');\nmodule.exports.VectorTileFeature = require('./lib/vectortilefeature.js');\nmodule.exports.VectorTileLayer = require('./lib/vectortilelayer.js');\n","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (factory((global.topojson = {})));\n}(this, function (exports) { 'use strict';\n\n  function noop() {}\n\n  function absolute(transform) {\n    if (!transform) return noop;\n    var x0,\n        y0,\n        kx = transform.scale[0],\n        ky = transform.scale[1],\n        dx = transform.translate[0],\n        dy = transform.translate[1];\n    return function(point, i) {\n      if (!i) x0 = y0 = 0;\n      point[0] = (x0 += point[0]) * kx + dx;\n      point[1] = (y0 += point[1]) * ky + dy;\n    };\n  }\n\n  function relative(transform) {\n    if (!transform) return noop;\n    var x0,\n        y0,\n        kx = transform.scale[0],\n        ky = transform.scale[1],\n        dx = transform.translate[0],\n        dy = transform.translate[1];\n    return function(point, i) {\n      if (!i) x0 = y0 = 0;\n      var x1 = (point[0] - dx) / kx | 0,\n          y1 = (point[1] - dy) / ky | 0;\n      point[0] = x1 - x0;\n      point[1] = y1 - y0;\n      x0 = x1;\n      y0 = y1;\n    };\n  }\n\n  function reverse(array, n) {\n    var t, j = array.length, i = j - n;\n    while (i < --j) t = array[i], array[i++] = array[j], array[j] = t;\n  }\n\n  function bisect(a, x) {\n    var lo = 0, hi = a.length;\n    while (lo < hi) {\n      var mid = lo + hi >>> 1;\n      if (a[mid] < x) lo = mid + 1;\n      else hi = mid;\n    }\n    return lo;\n  }\n\n  function feature(topology, o) {\n    return o.type === \"GeometryCollection\" ? {\n      type: \"FeatureCollection\",\n      features: o.geometries.map(function(o) { return feature$1(topology, o); })\n    } : feature$1(topology, o);\n  }\n\n  function feature$1(topology, o) {\n    var f = {\n      type: \"Feature\",\n      id: o.id,\n      properties: o.properties || {},\n      geometry: object(topology, o)\n    };\n    if (o.id == null) delete f.id;\n    return f;\n  }\n\n  function object(topology, o) {\n    var absolute$$ = absolute(topology.transform),\n        arcs = topology.arcs;\n\n    function arc(i, points) {\n      if (points.length) points.pop();\n      for (var a = arcs[i < 0 ? ~i : i], k = 0, n = a.length, p; k < n; ++k) {\n        points.push(p = a[k].slice());\n        absolute$$(p, k);\n      }\n      if (i < 0) reverse(points, n);\n    }\n\n    function point(p) {\n      p = p.slice();\n      absolute$$(p, 0);\n      return p;\n    }\n\n    function line(arcs) {\n      var points = [];\n      for (var i = 0, n = arcs.length; i < n; ++i) arc(arcs[i], points);\n      if (points.length < 2) points.push(points[0].slice());\n      return points;\n    }\n\n    function ring(arcs) {\n      var points = line(arcs);\n      while (points.length < 4) points.push(points[0].slice());\n      return points;\n    }\n\n    function polygon(arcs) {\n      return arcs.map(ring);\n    }\n\n    function geometry(o) {\n      var t = o.type;\n      return t === \"GeometryCollection\" ? {type: t, geometries: o.geometries.map(geometry)}\n          : t in geometryType ? {type: t, coordinates: geometryType[t](o)}\n          : null;\n    }\n\n    var geometryType = {\n      Point: function(o) { return point(o.coordinates); },\n      MultiPoint: function(o) { return o.coordinates.map(point); },\n      LineString: function(o) { return line(o.arcs); },\n      MultiLineString: function(o) { return o.arcs.map(line); },\n      Polygon: function(o) { return polygon(o.arcs); },\n      MultiPolygon: function(o) { return o.arcs.map(polygon); }\n    };\n\n    return geometry(o);\n  }\n\n  function stitchArcs(topology, arcs) {\n    var stitchedArcs = {},\n        fragmentByStart = {},\n        fragmentByEnd = {},\n        fragments = [],\n        emptyIndex = -1;\n\n    // Stitch empty arcs first, since they may be subsumed by other arcs.\n    arcs.forEach(function(i, j) {\n      var arc = topology.arcs[i < 0 ? ~i : i], t;\n      if (arc.length < 3 && !arc[1][0] && !arc[1][1]) {\n        t = arcs[++emptyIndex], arcs[emptyIndex] = i, arcs[j] = t;\n      }\n    });\n\n    arcs.forEach(function(i) {\n      var e = ends(i),\n          start = e[0],\n          end = e[1],\n          f, g;\n\n      if (f = fragmentByEnd[start]) {\n        delete fragmentByEnd[f.end];\n        f.push(i);\n        f.end = end;\n        if (g = fragmentByStart[end]) {\n          delete fragmentByStart[g.start];\n          var fg = g === f ? f : f.concat(g);\n          fragmentByStart[fg.start = f.start] = fragmentByEnd[fg.end = g.end] = fg;\n        } else {\n          fragmentByStart[f.start] = fragmentByEnd[f.end] = f;\n        }\n      } else if (f = fragmentByStart[end]) {\n        delete fragmentByStart[f.start];\n        f.unshift(i);\n        f.start = start;\n        if (g = fragmentByEnd[start]) {\n          delete fragmentByEnd[g.end];\n          var gf = g === f ? f : g.concat(f);\n          fragmentByStart[gf.start = g.start] = fragmentByEnd[gf.end = f.end] = gf;\n        } else {\n          fragmentByStart[f.start] = fragmentByEnd[f.end] = f;\n        }\n      } else {\n        f = [i];\n        fragmentByStart[f.start = start] = fragmentByEnd[f.end = end] = f;\n      }\n    });\n\n    function ends(i) {\n      var arc = topology.arcs[i < 0 ? ~i : i], p0 = arc[0], p1;\n      if (topology.transform) p1 = [0, 0], arc.forEach(function(dp) { p1[0] += dp[0], p1[1] += dp[1]; });\n      else p1 = arc[arc.length - 1];\n      return i < 0 ? [p1, p0] : [p0, p1];\n    }\n\n    function flush(fragmentByEnd, fragmentByStart) {\n      for (var k in fragmentByEnd) {\n        var f = fragmentByEnd[k];\n        delete fragmentByStart[f.start];\n        delete f.start;\n        delete f.end;\n        f.forEach(function(i) { stitchedArcs[i < 0 ? ~i : i] = 1; });\n        fragments.push(f);\n      }\n    }\n\n    flush(fragmentByEnd, fragmentByStart);\n    flush(fragmentByStart, fragmentByEnd);\n    arcs.forEach(function(i) { if (!stitchedArcs[i < 0 ? ~i : i]) fragments.push([i]); });\n\n    return fragments;\n  }\n\n  function mesh(topology) {\n    return object(topology, meshArcs.apply(this, arguments));\n  }\n\n  function meshArcs(topology, o, filter) {\n    var arcs = [];\n\n    function arc(i) {\n      var j = i < 0 ? ~i : i;\n      (geomsByArc[j] || (geomsByArc[j] = [])).push({i: i, g: geom});\n    }\n\n    function line(arcs) {\n      arcs.forEach(arc);\n    }\n\n    function polygon(arcs) {\n      arcs.forEach(line);\n    }\n\n    function geometry(o) {\n      if (o.type === \"GeometryCollection\") o.geometries.forEach(geometry);\n      else if (o.type in geometryType) geom = o, geometryType[o.type](o.arcs);\n    }\n\n    if (arguments.length > 1) {\n      var geomsByArc = [],\n          geom;\n\n      var geometryType = {\n        LineString: line,\n        MultiLineString: polygon,\n        Polygon: polygon,\n        MultiPolygon: function(arcs) { arcs.forEach(polygon); }\n      };\n\n      geometry(o);\n\n      geomsByArc.forEach(arguments.length < 3\n          ? function(geoms) { arcs.push(geoms[0].i); }\n          : function(geoms) { if (filter(geoms[0].g, geoms[geoms.length - 1].g)) arcs.push(geoms[0].i); });\n    } else {\n      for (var i = 0, n = topology.arcs.length; i < n; ++i) arcs.push(i);\n    }\n\n    return {type: \"MultiLineString\", arcs: stitchArcs(topology, arcs)};\n  }\n\n  function triangle(triangle) {\n    var a = triangle[0], b = triangle[1], c = triangle[2];\n    return Math.abs((a[0] - c[0]) * (b[1] - a[1]) - (a[0] - b[0]) * (c[1] - a[1]));\n  }\n\n  function ring(ring) {\n    var i = -1,\n        n = ring.length,\n        a,\n        b = ring[n - 1],\n        area = 0;\n\n    while (++i < n) {\n      a = b;\n      b = ring[i];\n      area += a[0] * b[1] - a[1] * b[0];\n    }\n\n    return area / 2;\n  }\n\n  function merge(topology) {\n    return object(topology, mergeArcs.apply(this, arguments));\n  }\n\n  function mergeArcs(topology, objects) {\n    var polygonsByArc = {},\n        polygons = [],\n        components = [];\n\n    objects.forEach(function(o) {\n      if (o.type === \"Polygon\") register(o.arcs);\n      else if (o.type === \"MultiPolygon\") o.arcs.forEach(register);\n    });\n\n    function register(polygon) {\n      polygon.forEach(function(ring$$) {\n        ring$$.forEach(function(arc) {\n          (polygonsByArc[arc = arc < 0 ? ~arc : arc] || (polygonsByArc[arc] = [])).push(polygon);\n        });\n      });\n      polygons.push(polygon);\n    }\n\n    function exterior(ring$$) {\n      return ring(object(topology, {type: \"Polygon\", arcs: [ring$$]}).coordinates[0]) > 0; // TODO allow spherical?\n    }\n\n    polygons.forEach(function(polygon) {\n      if (!polygon._) {\n        var component = [],\n            neighbors = [polygon];\n        polygon._ = 1;\n        components.push(component);\n        while (polygon = neighbors.pop()) {\n          component.push(polygon);\n          polygon.forEach(function(ring$$) {\n            ring$$.forEach(function(arc) {\n              polygonsByArc[arc < 0 ? ~arc : arc].forEach(function(polygon) {\n                if (!polygon._) {\n                  polygon._ = 1;\n                  neighbors.push(polygon);\n                }\n              });\n            });\n          });\n        }\n      }\n    });\n\n    polygons.forEach(function(polygon) {\n      delete polygon._;\n    });\n\n    return {\n      type: \"MultiPolygon\",\n      arcs: components.map(function(polygons) {\n        var arcs = [], n;\n\n        // Extract the exterior (unique) arcs.\n        polygons.forEach(function(polygon) {\n          polygon.forEach(function(ring$$) {\n            ring$$.forEach(function(arc) {\n              if (polygonsByArc[arc < 0 ? ~arc : arc].length < 2) {\n                arcs.push(arc);\n              }\n            });\n          });\n        });\n\n        // Stitch the arcs into one or more rings.\n        arcs = stitchArcs(topology, arcs);\n\n        // If more than one ring is returned,\n        // at most one of these rings can be the exterior;\n        // this exterior ring has the same winding order\n        // as any exterior ring in the original polygons.\n        if ((n = arcs.length) > 1) {\n          var sgn = exterior(polygons[0][0]);\n          for (var i = 0, t; i < n; ++i) {\n            if (sgn === exterior(arcs[i])) {\n              t = arcs[0], arcs[0] = arcs[i], arcs[i] = t;\n              break;\n            }\n          }\n        }\n\n        return arcs;\n      })\n    };\n  }\n\n  function neighbors(objects) {\n    var indexesByArc = {}, // arc index -> array of object indexes\n        neighbors = objects.map(function() { return []; });\n\n    function line(arcs, i) {\n      arcs.forEach(function(a) {\n        if (a < 0) a = ~a;\n        var o = indexesByArc[a];\n        if (o) o.push(i);\n        else indexesByArc[a] = [i];\n      });\n    }\n\n    function polygon(arcs, i) {\n      arcs.forEach(function(arc) { line(arc, i); });\n    }\n\n    function geometry(o, i) {\n      if (o.type === \"GeometryCollection\") o.geometries.forEach(function(o) { geometry(o, i); });\n      else if (o.type in geometryType) geometryType[o.type](o.arcs, i);\n    }\n\n    var geometryType = {\n      LineString: line,\n      MultiLineString: polygon,\n      Polygon: polygon,\n      MultiPolygon: function(arcs, i) { arcs.forEach(function(arc) { polygon(arc, i); }); }\n    };\n\n    objects.forEach(geometry);\n\n    for (var i in indexesByArc) {\n      for (var indexes = indexesByArc[i], m = indexes.length, j = 0; j < m; ++j) {\n        for (var k = j + 1; k < m; ++k) {\n          var ij = indexes[j], ik = indexes[k], n;\n          if ((n = neighbors[ij])[i = bisect(n, ik)] !== ik) n.splice(i, 0, ik);\n          if ((n = neighbors[ik])[i = bisect(n, ij)] !== ij) n.splice(i, 0, ij);\n        }\n      }\n    }\n\n    return neighbors;\n  }\n\n  function compareArea(a, b) {\n    return a[1][2] - b[1][2];\n  }\n\n  function minAreaHeap() {\n    var heap = {},\n        array = [],\n        size = 0;\n\n    heap.push = function(object) {\n      up(array[object._ = size] = object, size++);\n      return size;\n    };\n\n    heap.pop = function() {\n      if (size <= 0) return;\n      var removed = array[0], object;\n      if (--size > 0) object = array[size], down(array[object._ = 0] = object, 0);\n      return removed;\n    };\n\n    heap.remove = function(removed) {\n      var i = removed._, object;\n      if (array[i] !== removed) return; // invalid request\n      if (i !== --size) object = array[size], (compareArea(object, removed) < 0 ? up : down)(array[object._ = i] = object, i);\n      return i;\n    };\n\n    function up(object, i) {\n      while (i > 0) {\n        var j = ((i + 1) >> 1) - 1,\n            parent = array[j];\n        if (compareArea(object, parent) >= 0) break;\n        array[parent._ = i] = parent;\n        array[object._ = i = j] = object;\n      }\n    }\n\n    function down(object, i) {\n      while (true) {\n        var r = (i + 1) << 1,\n            l = r - 1,\n            j = i,\n            child = array[j];\n        if (l < size && compareArea(array[l], child) < 0) child = array[j = l];\n        if (r < size && compareArea(array[r], child) < 0) child = array[j = r];\n        if (j === i) break;\n        array[child._ = i] = child;\n        array[object._ = i = j] = object;\n      }\n    }\n\n    return heap;\n  }\n\n  function presimplify(topology, triangleArea) {\n    var absolute$$ = absolute(topology.transform),\n        relative$$ = relative(topology.transform),\n        heap = minAreaHeap();\n\n    if (!triangleArea) triangleArea = triangle;\n\n    topology.arcs.forEach(function(arc) {\n      var triangles = [],\n          maxArea = 0,\n          triangle,\n          i,\n          n,\n          p;\n\n      // To store each point’s effective area, we create a new array rather than\n      // extending the passed-in point to workaround a Chrome/V8 bug (getting\n      // stuck in smi mode). For midpoints, the initial effective area of\n      // Infinity will be computed in the next step.\n      for (i = 0, n = arc.length; i < n; ++i) {\n        p = arc[i];\n        absolute$$(arc[i] = [p[0], p[1], Infinity], i);\n      }\n\n      for (i = 1, n = arc.length - 1; i < n; ++i) {\n        triangle = arc.slice(i - 1, i + 2);\n        triangle[1][2] = triangleArea(triangle);\n        triangles.push(triangle);\n        heap.push(triangle);\n      }\n\n      for (i = 0, n = triangles.length; i < n; ++i) {\n        triangle = triangles[i];\n        triangle.previous = triangles[i - 1];\n        triangle.next = triangles[i + 1];\n      }\n\n      while (triangle = heap.pop()) {\n        var previous = triangle.previous,\n            next = triangle.next;\n\n        // If the area of the current point is less than that of the previous point\n        // to be eliminated, use the latter's area instead. This ensures that the\n        // current point cannot be eliminated without eliminating previously-\n        // eliminated points.\n        if (triangle[1][2] < maxArea) triangle[1][2] = maxArea;\n        else maxArea = triangle[1][2];\n\n        if (previous) {\n          previous.next = next;\n          previous[2] = triangle[2];\n          update(previous);\n        }\n\n        if (next) {\n          next.previous = previous;\n          next[0] = triangle[0];\n          update(next);\n        }\n      }\n\n      arc.forEach(relative$$);\n    });\n\n    function update(triangle) {\n      heap.remove(triangle);\n      triangle[1][2] = triangleArea(triangle);\n      heap.push(triangle);\n    }\n\n    return topology;\n  }\n\n  var version = \"1.6.24\";\n\n  exports.version = version;\n  exports.mesh = mesh;\n  exports.meshArcs = meshArcs;\n  exports.merge = merge;\n  exports.mergeArcs = mergeArcs;\n  exports.feature = feature;\n  exports.neighbors = neighbors;\n  exports.presimplify = presimplify;\n\n}));","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict';\n\nvar VectorTileLayer = require('./vectortilelayer');\n\nmodule.exports = VectorTile;\n\nfunction VectorTile(pbf, end) {\n    this.layers = pbf.readFields(readTile, {}, end);\n}\n\nfunction readTile(tag, layers, pbf) {\n    if (tag === 3) {\n        var layer = new VectorTileLayer(pbf, pbf.readVarint() + pbf.pos);\n        if (layer.length) layers[layer.name] = layer;\n    }\n}\n\n","'use strict';\n\nvar Point = require('point-geometry');\n\nmodule.exports = VectorTileFeature;\n\nfunction VectorTileFeature(pbf, end, extent, keys, values) {\n    // Public\n    this.properties = {};\n    this.extent = extent;\n    this.type = 0;\n\n    // Private\n    this._pbf = pbf;\n    this._geometry = -1;\n    this._keys = keys;\n    this._values = values;\n\n    pbf.readFields(readFeature, this, end);\n}\n\nfunction readFeature(tag, feature, pbf) {\n    if (tag == 1) feature._id = pbf.readVarint();\n    else if (tag == 2) readTag(pbf, feature);\n    else if (tag == 3) feature.type = pbf.readVarint();\n    else if (tag == 4) feature._geometry = pbf.pos;\n}\n\nfunction readTag(pbf, feature) {\n    var end = pbf.readVarint() + pbf.pos;\n\n    while (pbf.pos < end) {\n        var key = feature._keys[pbf.readVarint()],\n            value = feature._values[pbf.readVarint()];\n        feature.properties[key] = value;\n    }\n}\n\nVectorTileFeature.types = ['Unknown', 'Point', 'LineString', 'Polygon'];\n\nVectorTileFeature.prototype.loadGeometry = function() {\n    var pbf = this._pbf;\n    pbf.pos = this._geometry;\n\n    var end = pbf.readVarint() + pbf.pos,\n        cmd = 1,\n        length = 0,\n        x = 0,\n        y = 0,\n        lines = [],\n        line;\n\n    while (pbf.pos < end) {\n        if (!length) {\n            var cmdLen = pbf.readVarint();\n            cmd = cmdLen & 0x7;\n            length = cmdLen >> 3;\n        }\n\n        length--;\n\n        if (cmd === 1 || cmd === 2) {\n            x += pbf.readSVarint();\n            y += pbf.readSVarint();\n\n            if (cmd === 1) { // moveTo\n                if (line) lines.push(line);\n                line = [];\n            }\n\n            line.push(new Point(x, y));\n\n        } else if (cmd === 7) {\n\n            // Workaround for https://github.com/mapbox/mapnik-vector-tile/issues/90\n            if (line) {\n                line.push(line[0].clone()); // closePolygon\n            }\n\n        } else {\n            throw new Error('unknown command ' + cmd);\n        }\n    }\n\n    if (line) lines.push(line);\n\n    return lines;\n};\n\nVectorTileFeature.prototype.bbox = function() {\n    var pbf = this._pbf;\n    pbf.pos = this._geometry;\n\n    var end = pbf.readVarint() + pbf.pos,\n        cmd = 1,\n        length = 0,\n        x = 0,\n        y = 0,\n        x1 = Infinity,\n        x2 = -Infinity,\n        y1 = Infinity,\n        y2 = -Infinity;\n\n    while (pbf.pos < end) {\n        if (!length) {\n            var cmdLen = pbf.readVarint();\n            cmd = cmdLen & 0x7;\n            length = cmdLen >> 3;\n        }\n\n        length--;\n\n        if (cmd === 1 || cmd === 2) {\n            x += pbf.readSVarint();\n            y += pbf.readSVarint();\n            if (x < x1) x1 = x;\n            if (x > x2) x2 = x;\n            if (y < y1) y1 = y;\n            if (y > y2) y2 = y;\n\n        } else if (cmd !== 7) {\n            throw new Error('unknown command ' + cmd);\n        }\n    }\n\n    return [x1, y1, x2, y2];\n};\n\nVectorTileFeature.prototype.toGeoJSON = function(x, y, z) {\n    var size = this.extent * Math.pow(2, z),\n        x0 = this.extent * x,\n        y0 = this.extent * y,\n        coords = this.loadGeometry(),\n        type = VectorTileFeature.types[this.type];\n\n    for (var i = 0; i < coords.length; i++) {\n        var line = coords[i];\n        for (var j = 0; j < line.length; j++) {\n            var p = line[j], y2 = 180 - (p.y + y0) * 360 / size;\n            line[j] = [\n                (p.x + x0) * 360 / size - 180,\n                360 / Math.PI * Math.atan(Math.exp(y2 * Math.PI / 180)) - 90\n            ];\n        }\n    }\n\n    if (type === 'Point' && coords.length === 1) {\n        coords = coords[0][0];\n    } else if (type === 'Point') {\n        coords = coords[0];\n        type = 'MultiPoint';\n    } else if (type === 'LineString' && coords.length === 1) {\n        coords = coords[0];\n    } else if (type === 'LineString') {\n        type = 'MultiLineString';\n    }\n\n    var result = {\n        type: \"Feature\",\n        geometry: {\n            type: type,\n            coordinates: coords\n        },\n        properties: this.properties\n    };\n\n    if ('_id' in this) {\n        result.id = this._id;\n    }\n\n    return result;\n};\n","'use strict';\n\nvar VectorTileFeature = require('./vectortilefeature.js');\n\nmodule.exports = VectorTileLayer;\n\nfunction VectorTileLayer(pbf, end) {\n    // Public\n    this.version = 1;\n    this.name = null;\n    this.extent = 4096;\n    this.length = 0;\n\n    // Private\n    this._pbf = pbf;\n    this._keys = [];\n    this._values = [];\n    this._features = [];\n\n    pbf.readFields(readLayer, this, end);\n\n    this.length = this._features.length;\n}\n\nfunction readLayer(tag, layer, pbf) {\n    if (tag === 15) layer.version = pbf.readVarint();\n    else if (tag === 1) layer.name = pbf.readString();\n    else if (tag === 5) layer.extent = pbf.readVarint();\n    else if (tag === 2) layer._features.push(pbf.pos);\n    else if (tag === 3) layer._keys.push(pbf.readString());\n    else if (tag === 4) layer._values.push(readValueMessage(pbf));\n}\n\nfunction readValueMessage(pbf) {\n    var value = null,\n        end = pbf.readVarint() + pbf.pos;\n\n    while (pbf.pos < end) {\n        var tag = pbf.readVarint() >> 3;\n\n        value = tag === 1 ? pbf.readString() :\n            tag === 2 ? pbf.readFloat() :\n            tag === 3 ? pbf.readDouble() :\n            tag === 4 ? pbf.readVarint64() :\n            tag === 5 ? pbf.readVarint() :\n            tag === 6 ? pbf.readSVarint() :\n            tag === 7 ? pbf.readBoolean() : null;\n    }\n\n    return value;\n}\n\n// return feature `i` from this layer as a `VectorTileFeature`\nVectorTileLayer.prototype.feature = function(i) {\n    if (i < 0 || i >= this._features.length) throw new Error('feature index out of bounds');\n\n    this._pbf.pos = this._features[i];\n\n    var end = this._pbf.readVarint() + this._pbf.pos;\n    return new VectorTileFeature(this._pbf, end, this.extent, this._keys, this._values);\n};\n"],"names":["unit","this","clone","_unit","perp","_perp","round","_round","mag","Math","sqrt","x","y","equals","p","dist","distSqr","dx","dy","angle","atan2","angleTo","b","angleWith","angleWithSep","_matMult","m","_add","_sub","_mult","k","_div","_rotate","cos","sin","Point","convert","a","Array","isArray","L","SVG","Tile","extend","initialize","tileSize","options","prototype","call","_size","_initContainer","_container","setAttribute","join","getContainer","onAdd","Util","FalseFn","create","_addPath","layer","_rootGroup","appendChild","_path","svg","tile","opts","Canvas","_layers","_drawnLayers","container","document","createElement","_ctx","getContext","canvas","VectorGrid","GridLayer","rendererFactory","vectorTileLayerStyles","createTile","coords","done","renderer","getTileSize","vectorTilePromise","_getVectorTilePromise","then","vectorTile","layerName","layers","pxPerExtent","extent","layerStyle","Path","i","features","feat","_mkFeatureParts","styleOptions","Function","properties","z","j","style","type","fill","_initPath","_updateStyle","_updatePoly","requestAnimFrame","bind","rings","geometry","_parts","ring","part","coord","push","point","vectorGrid","Slicer","vectorTileLayerName","geojson","_slicers","objects","geojsonvt","topojson","feature","tileLayers","slicer","slicedTileLayer","getTile","vectorTileLayer","name","length","tags","Promise","resolve","Protobuf","subdomains","url","_url","_getSubdomain","TileLayer","tileUrl","template","s","fetch","response","ok","blob","reader","FileReader","addEventListener","pbf","Pbf","result","VectorTile","readAsArrayBuffer","json","feats","loadGeometry","protobuf","f","exports","module","define","amd","g","window","global","self","e","t","n","r","o","u","require","Error","code","l",1,"clip","scale","k1","k2","axis","intersect","minAll","maxAll","clipped","min","max","slices","clipPoints","clipGeometry","slice","ak","closed","last","bk","points","area","len","newSlice","data","tolerance","convertFeature","geom","coordinates","projectPoint","project","geometries","calcBBox","lonlats","projected","simplify","calcSize","PI","log","abs","calcRingBBox","GeoJSONVT","Object","debug","console","time","z2","maxZoom","tiles","tileCoords","timeEnd","indexMaxZoom","indexMaxPoints","stats","total","wrap","buffer","intersectX","splitTile","numFeatures","numPoints","JSON","stringify","toID","intersectY","dest","src","isClippedSquare","source","transform","solidChildren","cz","cx","cy","stack","solid","pop","id","tileTolerance","numSimplified","key","floor","tl","bl","tr","br","left","right","k3","k4","parent","z0","x0","y0","maxSqDist","sqDist","index","sqTolerance","first","getSqSegDist","bx","by","px","py","tx","ty","noSimplify","transformed","addFeature","simplified","simplifiedRing","transformTile","transformPoint","merged","shiftFeatureCoords","concat","offset","newFeatures","newGeometry","shiftCoords","newPoints","Buffer","arr","buf","Uint8Array","set","readUInt32LE","BufferMethods","writeUInt32LE","readInt32LE","writeInt32LE","readFloatLE","writeFloatLE","readDoubleLE","writeDoubleLE","toString","write","copy","_isBuffer","encodeString","str","c","lead","bytes","charCodeAt","lastStr","lastStrEncoded","ieee754","pos","val","read","encoding","start","end","tmp","ch","decodeURIComponent","String","fromCharCode","subarray","byteLength","isBuffer","writePackedVarint","writeVarint","writePackedSVarint","writeSVarint","writePackedFloat","writeFloat","writePackedDouble","writeDouble","writePackedBoolean","writeBoolean","writePackedFixed32","writeFixed32","writePackedSFixed32","writeSFixed32","writePackedFixed64","writeFixed64","writePackedSFixed64","writeSFixed64","Varint","Fixed64","Bytes","Fixed32","SHIFT_LEFT_32","SHIFT_RIGHT_32","POW_2_63","pow","destroy","readFields","readField","readVarint","tag","startPos","skip","readMessage","readFixed32","readSFixed32","readFixed64","readSFixed64","readFloat","readDouble","b0","b1","b2","b3","readVarint64","readSVarint","num","readBoolean","Boolean","readString","readBytes","readPackedVarint","readPackedSVarint","readPackedBoolean","readPackedFloat","readPackedDouble","readPackedFixed32","readPackedSFixed32","readPackedFixed64","readPackedSFixed64","writeTag","realloc","finish","writeString","writeBytes","writeRawMessage","fn","obj","varintLen","ceil","LN2","writeMessage","writeBytesField","writeFixed32Field","writeSFixed32Field","writeFixed64Field","writeSFixed64Field","writeVarintField","writeSVarintField","writeStringField","writeFloatField","writeDoubleField","writeBooleanField","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","d","NaN","Infinity","value","rt","isNaN","factory","noop","absolute","kx","ky","translate","relative","x1","y1","reverse","array","bisect","lo","hi","mid","topology","map","feature$1","object","arc","arcs","absolute$$","line","polygon","geometryType","MultiPoint","LineString","MultiLineString","Polygon","MultiPolygon","stitchArcs","ends","p1","p0","forEach","dp","flush","fragmentByEnd","fragmentByStart","stitchedArcs","fragments","emptyIndex","fg","unshift","gf","mesh","meshArcs","apply","arguments","filter","geomsByArc","geoms","triangle","merge","mergeArcs","register","ring$$","polygonsByArc","polygons","exterior","components","_","component","neighbors","sgn","indexesByArc","indexes","ij","ik","splice","compareArea","minAreaHeap","up","down","child","size","heap","removed","remove","presimplify","triangleArea","update","relative$$","triangles","maxArea","previous","next","version","VectorTileFeature","VectorTileLayer","readTile","keys","values","_pbf","_geometry","_keys","_values","readFeature","_id","readTag","types","cmd","lines","cmdLen","bbox","x2","y2","toGeoJSON","atan","exp","_features","readLayer","readValueMessage","add","sub","mult","div","rotate","matMult"],"mappings":"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"}